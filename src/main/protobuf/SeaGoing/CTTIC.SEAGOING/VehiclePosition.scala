// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package SeaGoing.CTTIC.SEAGOING



/** 车辆定位数据
  *
  * @param accessCode
  *   车辆归属省行政区域编码
  * @param city
  *   车辆归属地市编码
  * @param curAccessCode
  *   车辆当前归属省行政区域编码
  * @param trans
  *   车辆归属运输行业编码
  * @param updateTime
  *   更新时间
  * @param vehicleNo
  *   车牌号码
  * @param plateColor
  *   车牌颜色
  * @param gnss
  *   车辆动态数据
  * @param reserved
  *   备注
  */
@SerialVersionUID(0L)
final case class VehiclePosition(
    accessCode: Int,
    city: Int,
    curAccessCode: scala.Option[Int] = None,
    trans: scala.Option[Int] = None,
    updateTime: Long,
    vehicleNo: String,
    plateColor: scala.Option[Int] = None,
    gnss: SeaGoing.CTTIC.SEAGOING.Gnss,
    reserved: scala.Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[VehiclePosition] with com.trueaccord.lenses.Updatable[VehiclePosition] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, accessCode)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, city)
      if (curAccessCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, curAccessCode.get) }
      if (trans.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(4, trans.get) }
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(5, updateTime)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, vehicleNo)
      if (plateColor.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, plateColor.get) }
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(gnss.serializedSize) + gnss.serializedSize
      if (reserved.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, reserved.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeUInt32(1, accessCode)
      _output__.writeUInt32(2, city)
      curAccessCode.foreach { __v =>
        _output__.writeUInt32(3, __v)
      };
      trans.foreach { __v =>
        _output__.writeUInt32(4, __v)
      };
      _output__.writeUInt64(5, updateTime)
      _output__.writeString(6, vehicleNo)
      plateColor.foreach { __v =>
        _output__.writeInt32(7, __v)
      };
      _output__.writeTag(8, 2)
      _output__.writeUInt32NoTag(gnss.serializedSize)
      gnss.writeTo(_output__)
      reserved.foreach { __v =>
        _output__.writeString(9, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): SeaGoing.CTTIC.SEAGOING.VehiclePosition = {
      var __accessCode = this.accessCode
      var __city = this.city
      var __curAccessCode = this.curAccessCode
      var __trans = this.trans
      var __updateTime = this.updateTime
      var __vehicleNo = this.vehicleNo
      var __plateColor = this.plateColor
      var __gnss = this.gnss
      var __reserved = this.reserved
      var __requiredFields0: Long = 0x1fL
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __accessCode = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __city = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __curAccessCode = Some(_input__.readUInt32())
          case 32 =>
            __trans = Some(_input__.readUInt32())
          case 40 =>
            __updateTime = _input__.readUInt64()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 50 =>
            __vehicleNo = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 56 =>
            __plateColor = Some(_input__.readInt32())
          case 66 =>
            __gnss = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __gnss)
            __requiredFields0 &= 0xffffffffffffffefL
          case 74 =>
            __reserved = Some(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      SeaGoing.CTTIC.SEAGOING.VehiclePosition(
          accessCode = __accessCode,
          city = __city,
          curAccessCode = __curAccessCode,
          trans = __trans,
          updateTime = __updateTime,
          vehicleNo = __vehicleNo,
          plateColor = __plateColor,
          gnss = __gnss,
          reserved = __reserved
      )
    }
    def withAccessCode(__v: Int): VehiclePosition = copy(accessCode = __v)
    def withCity(__v: Int): VehiclePosition = copy(city = __v)
    def getCurAccessCode: Int = curAccessCode.getOrElse(0)
    def clearCurAccessCode: VehiclePosition = copy(curAccessCode = None)
    def withCurAccessCode(__v: Int): VehiclePosition = copy(curAccessCode = Some(__v))
    def getTrans: Int = trans.getOrElse(0)
    def clearTrans: VehiclePosition = copy(trans = None)
    def withTrans(__v: Int): VehiclePosition = copy(trans = Some(__v))
    def withUpdateTime(__v: Long): VehiclePosition = copy(updateTime = __v)
    def withVehicleNo(__v: String): VehiclePosition = copy(vehicleNo = __v)
    def getPlateColor: Int = plateColor.getOrElse(0)
    def clearPlateColor: VehiclePosition = copy(plateColor = None)
    def withPlateColor(__v: Int): VehiclePosition = copy(plateColor = Some(__v))
    def withGnss(__v: SeaGoing.CTTIC.SEAGOING.Gnss): VehiclePosition = copy(gnss = __v)
    def getReserved: String = reserved.getOrElse("")
    def clearReserved: VehiclePosition = copy(reserved = None)
    def withReserved(__v: String): VehiclePosition = copy(reserved = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => accessCode
        case 2 => city
        case 3 => curAccessCode.orNull
        case 4 => trans.orNull
        case 5 => updateTime
        case 6 => vehicleNo
        case 7 => plateColor.orNull
        case 8 => gnss
        case 9 => reserved.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(accessCode)
        case 2 => _root_.scalapb.descriptors.PInt(city)
        case 3 => curAccessCode.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => trans.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PLong(updateTime)
        case 6 => _root_.scalapb.descriptors.PString(vehicleNo)
        case 7 => plateColor.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => gnss.toPMessage
        case 9 => reserved.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = SeaGoing.CTTIC.SEAGOING.VehiclePosition
}

object VehiclePosition extends com.trueaccord.scalapb.GeneratedMessageCompanion[SeaGoing.CTTIC.SEAGOING.VehiclePosition] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[SeaGoing.CTTIC.SEAGOING.VehiclePosition] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): SeaGoing.CTTIC.SEAGOING.VehiclePosition = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    SeaGoing.CTTIC.SEAGOING.VehiclePosition(
      __fieldsMap(__fields.get(0)).asInstanceOf[Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[Int],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Int]],
      __fieldsMap(__fields.get(4)).asInstanceOf[Long],
      __fieldsMap(__fields.get(5)).asInstanceOf[String],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Int]],
      __fieldsMap(__fields.get(7)).asInstanceOf[SeaGoing.CTTIC.SEAGOING.Gnss],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[SeaGoing.CTTIC.SEAGOING.VehiclePosition] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      SeaGoing.CTTIC.SEAGOING.VehiclePosition(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[Long],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).get.as[SeaGoing.CTTIC.SEAGOING.Gnss],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CTTICSEAGOINGProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CTTICSEAGOINGProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 8 => __out = SeaGoing.CTTIC.SEAGOING.Gnss
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = SeaGoing.CTTIC.SEAGOING.VehiclePosition(
    accessCode = 0,
    city = 0,
    updateTime = 0L,
    vehicleNo = "",
    gnss = SeaGoing.CTTIC.SEAGOING.Gnss.defaultInstance
  )
  implicit class VehiclePositionLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, SeaGoing.CTTIC.SEAGOING.VehiclePosition]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, SeaGoing.CTTIC.SEAGOING.VehiclePosition](_l) {
    def accessCode: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.accessCode)((c_, f_) => c_.copy(accessCode = f_))
    def city: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.city)((c_, f_) => c_.copy(city = f_))
    def curAccessCode: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getCurAccessCode)((c_, f_) => c_.copy(curAccessCode = Some(f_)))
    def optionalCurAccessCode: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.curAccessCode)((c_, f_) => c_.copy(curAccessCode = f_))
    def trans: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getTrans)((c_, f_) => c_.copy(trans = Some(f_)))
    def optionalTrans: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.trans)((c_, f_) => c_.copy(trans = f_))
    def updateTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.updateTime)((c_, f_) => c_.copy(updateTime = f_))
    def vehicleNo: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.vehicleNo)((c_, f_) => c_.copy(vehicleNo = f_))
    def plateColor: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getPlateColor)((c_, f_) => c_.copy(plateColor = Some(f_)))
    def optionalPlateColor: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.plateColor)((c_, f_) => c_.copy(plateColor = f_))
    def gnss: _root_.com.trueaccord.lenses.Lens[UpperPB, SeaGoing.CTTIC.SEAGOING.Gnss] = field(_.gnss)((c_, f_) => c_.copy(gnss = f_))
    def reserved: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getReserved)((c_, f_) => c_.copy(reserved = Some(f_)))
    def optionalReserved: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.reserved)((c_, f_) => c_.copy(reserved = f_))
  }
  final val ACCESSCODE_FIELD_NUMBER = 1
  final val CITY_FIELD_NUMBER = 2
  final val CURACCESSCODE_FIELD_NUMBER = 3
  final val TRANS_FIELD_NUMBER = 4
  final val UPDATETIME_FIELD_NUMBER = 5
  final val VEHICLENO_FIELD_NUMBER = 6
  final val PLATECOLOR_FIELD_NUMBER = 7
  final val GNSS_FIELD_NUMBER = 8
  final val RESERVED_FIELD_NUMBER = 9
}
