// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package SeaGoing.CTTIC.SEAGOING



/** 车辆基础数据
  *
  * @param vehicleNo
  *   车牌号码
  * @param plateColor
  *   车牌颜色	
  * @param providerId
  *   服务商ID
  * @param ownerPhone
  *   车主电话
  * @param accessCode
  *   车辆归属省行政区域编码
  * @param reserved
  *   备注
  */
@SerialVersionUID(0L)
final case class VehBaseInfo(
    vehicleNo: String,
    plateColor: scala.Option[Int] = None,
    providerId: scala.Option[String] = None,
    ownerPhone: scala.Option[String] = None,
    accessCode: scala.Option[Int] = None,
    reserved: scala.Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[VehBaseInfo] with com.trueaccord.lenses.Updatable[VehBaseInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, vehicleNo)
      if (plateColor.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, plateColor.get) }
      if (providerId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, providerId.get) }
      if (ownerPhone.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, ownerPhone.get) }
      if (accessCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(5, accessCode.get) }
      if (reserved.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, reserved.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeString(1, vehicleNo)
      plateColor.foreach { __v =>
        _output__.writeInt32(2, __v)
      };
      providerId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      ownerPhone.foreach { __v =>
        _output__.writeString(4, __v)
      };
      accessCode.foreach { __v =>
        _output__.writeUInt32(5, __v)
      };
      reserved.foreach { __v =>
        _output__.writeString(6, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): SeaGoing.CTTIC.SEAGOING.VehBaseInfo = {
      var __vehicleNo = this.vehicleNo
      var __plateColor = this.plateColor
      var __providerId = this.providerId
      var __ownerPhone = this.ownerPhone
      var __accessCode = this.accessCode
      var __reserved = this.reserved
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __vehicleNo = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __plateColor = Some(_input__.readInt32())
          case 26 =>
            __providerId = Some(_input__.readString())
          case 34 =>
            __ownerPhone = Some(_input__.readString())
          case 40 =>
            __accessCode = Some(_input__.readUInt32())
          case 50 =>
            __reserved = Some(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      SeaGoing.CTTIC.SEAGOING.VehBaseInfo(
          vehicleNo = __vehicleNo,
          plateColor = __plateColor,
          providerId = __providerId,
          ownerPhone = __ownerPhone,
          accessCode = __accessCode,
          reserved = __reserved
      )
    }
    def withVehicleNo(__v: String): VehBaseInfo = copy(vehicleNo = __v)
    def getPlateColor: Int = plateColor.getOrElse(0)
    def clearPlateColor: VehBaseInfo = copy(plateColor = None)
    def withPlateColor(__v: Int): VehBaseInfo = copy(plateColor = Some(__v))
    def getProviderId: String = providerId.getOrElse("")
    def clearProviderId: VehBaseInfo = copy(providerId = None)
    def withProviderId(__v: String): VehBaseInfo = copy(providerId = Some(__v))
    def getOwnerPhone: String = ownerPhone.getOrElse("")
    def clearOwnerPhone: VehBaseInfo = copy(ownerPhone = None)
    def withOwnerPhone(__v: String): VehBaseInfo = copy(ownerPhone = Some(__v))
    def getAccessCode: Int = accessCode.getOrElse(0)
    def clearAccessCode: VehBaseInfo = copy(accessCode = None)
    def withAccessCode(__v: Int): VehBaseInfo = copy(accessCode = Some(__v))
    def getReserved: String = reserved.getOrElse("")
    def clearReserved: VehBaseInfo = copy(reserved = None)
    def withReserved(__v: String): VehBaseInfo = copy(reserved = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => vehicleNo
        case 2 => plateColor.orNull
        case 3 => providerId.orNull
        case 4 => ownerPhone.orNull
        case 5 => accessCode.orNull
        case 6 => reserved.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(vehicleNo)
        case 2 => plateColor.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => providerId.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => ownerPhone.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => accessCode.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => reserved.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = SeaGoing.CTTIC.SEAGOING.VehBaseInfo
}

object VehBaseInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[SeaGoing.CTTIC.SEAGOING.VehBaseInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[SeaGoing.CTTIC.SEAGOING.VehBaseInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): SeaGoing.CTTIC.SEAGOING.VehBaseInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    SeaGoing.CTTIC.SEAGOING.VehBaseInfo(
      __fieldsMap(__fields.get(0)).asInstanceOf[String],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[SeaGoing.CTTIC.SEAGOING.VehBaseInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      SeaGoing.CTTIC.SEAGOING.VehBaseInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CTTICSEAGOINGProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CTTICSEAGOINGProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = SeaGoing.CTTIC.SEAGOING.VehBaseInfo(
    vehicleNo = ""
  )
  implicit class VehBaseInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, SeaGoing.CTTIC.SEAGOING.VehBaseInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, SeaGoing.CTTIC.SEAGOING.VehBaseInfo](_l) {
    def vehicleNo: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.vehicleNo)((c_, f_) => c_.copy(vehicleNo = f_))
    def plateColor: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getPlateColor)((c_, f_) => c_.copy(plateColor = Some(f_)))
    def optionalPlateColor: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.plateColor)((c_, f_) => c_.copy(plateColor = f_))
    def providerId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getProviderId)((c_, f_) => c_.copy(providerId = Some(f_)))
    def optionalProviderId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.providerId)((c_, f_) => c_.copy(providerId = f_))
    def ownerPhone: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getOwnerPhone)((c_, f_) => c_.copy(ownerPhone = Some(f_)))
    def optionalOwnerPhone: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.ownerPhone)((c_, f_) => c_.copy(ownerPhone = f_))
    def accessCode: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getAccessCode)((c_, f_) => c_.copy(accessCode = Some(f_)))
    def optionalAccessCode: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.accessCode)((c_, f_) => c_.copy(accessCode = f_))
    def reserved: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getReserved)((c_, f_) => c_.copy(reserved = Some(f_)))
    def optionalReserved: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.reserved)((c_, f_) => c_.copy(reserved = f_))
  }
  final val VEHICLENO_FIELD_NUMBER = 1
  final val PLATECOLOR_FIELD_NUMBER = 2
  final val PROVIDERID_FIELD_NUMBER = 3
  final val OWNERPHONE_FIELD_NUMBER = 4
  final val ACCESSCODE_FIELD_NUMBER = 5
  final val RESERVED_FIELD_NUMBER = 6
}
