// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package ctitc.seagoing.SEAGOING



/** 服务商数据
  *
  * @param providerId
  *   服务商ID
  * @param platformId
  *   平台编号
  * @param platformName
  *   平台名称
  * @param province
  *   单位所在省
  * @param city
  *   单位所在市
  * @param address
  *   单位具体地址
  * @param company
  *   申请单位
  * @param contant
  *   单位联系人
  * @param contantPhone
  *   联系人手机
  * @param email
  *   联系人邮箱
  * @param zipCode
  *   邮编
  * @param inCharge
  *   客服负责人
  * @param inChargePhone
  *   客服手机
  * @param inChargeTele
  *   客服座机	
  * @param reserved
  *   备注
  */
@SerialVersionUID(0L)
final case class ProviderInfo(
    providerId: String,
    platformId: scala.Option[Int] = None,
    platformName: scala.Option[String] = None,
    province: scala.Option[String] = None,
    city: scala.Option[String] = None,
    address: scala.Option[String] = None,
    company: scala.Option[String] = None,
    contant: scala.Option[String] = None,
    contantPhone: scala.Option[String] = None,
    email: scala.Option[String] = None,
    zipCode: scala.Option[Int] = None,
    inCharge: scala.Option[String] = None,
    inChargePhone: scala.Option[String] = None,
    inChargeTele: scala.Option[String] = None,
    reserved: scala.Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ProviderInfo] with com.trueaccord.lenses.Updatable[ProviderInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, providerId)
      if (platformId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, platformId.get) }
      if (platformName.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, platformName.get) }
      if (province.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, province.get) }
      if (city.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, city.get) }
      if (address.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, address.get) }
      if (company.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, company.get) }
      if (contant.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, contant.get) }
      if (contantPhone.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, contantPhone.get) }
      if (email.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, email.get) }
      if (zipCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(11, zipCode.get) }
      if (inCharge.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, inCharge.get) }
      if (inChargePhone.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(13, inChargePhone.get) }
      if (inChargeTele.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, inChargeTele.get) }
      if (reserved.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(15, reserved.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeString(1, providerId)
      platformId.foreach { __v =>
        _output__.writeUInt32(2, __v)
      };
      platformName.foreach { __v =>
        _output__.writeString(3, __v)
      };
      province.foreach { __v =>
        _output__.writeString(4, __v)
      };
      city.foreach { __v =>
        _output__.writeString(5, __v)
      };
      address.foreach { __v =>
        _output__.writeString(6, __v)
      };
      company.foreach { __v =>
        _output__.writeString(7, __v)
      };
      contant.foreach { __v =>
        _output__.writeString(8, __v)
      };
      contantPhone.foreach { __v =>
        _output__.writeString(9, __v)
      };
      email.foreach { __v =>
        _output__.writeString(10, __v)
      };
      zipCode.foreach { __v =>
        _output__.writeUInt32(11, __v)
      };
      inCharge.foreach { __v =>
        _output__.writeString(12, __v)
      };
      inChargePhone.foreach { __v =>
        _output__.writeString(13, __v)
      };
      inChargeTele.foreach { __v =>
        _output__.writeString(14, __v)
      };
      reserved.foreach { __v =>
        _output__.writeString(15, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ctitc.seagoing.SEAGOING.ProviderInfo = {
      var __providerId = this.providerId
      var __platformId = this.platformId
      var __platformName = this.platformName
      var __province = this.province
      var __city = this.city
      var __address = this.address
      var __company = this.company
      var __contant = this.contant
      var __contantPhone = this.contantPhone
      var __email = this.email
      var __zipCode = this.zipCode
      var __inCharge = this.inCharge
      var __inChargePhone = this.inChargePhone
      var __inChargeTele = this.inChargeTele
      var __reserved = this.reserved
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __providerId = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __platformId = Some(_input__.readUInt32())
          case 26 =>
            __platformName = Some(_input__.readString())
          case 34 =>
            __province = Some(_input__.readString())
          case 42 =>
            __city = Some(_input__.readString())
          case 50 =>
            __address = Some(_input__.readString())
          case 58 =>
            __company = Some(_input__.readString())
          case 66 =>
            __contant = Some(_input__.readString())
          case 74 =>
            __contantPhone = Some(_input__.readString())
          case 82 =>
            __email = Some(_input__.readString())
          case 88 =>
            __zipCode = Some(_input__.readUInt32())
          case 98 =>
            __inCharge = Some(_input__.readString())
          case 106 =>
            __inChargePhone = Some(_input__.readString())
          case 114 =>
            __inChargeTele = Some(_input__.readString())
          case 122 =>
            __reserved = Some(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      ctitc.seagoing.SEAGOING.ProviderInfo(
          providerId = __providerId,
          platformId = __platformId,
          platformName = __platformName,
          province = __province,
          city = __city,
          address = __address,
          company = __company,
          contant = __contant,
          contantPhone = __contantPhone,
          email = __email,
          zipCode = __zipCode,
          inCharge = __inCharge,
          inChargePhone = __inChargePhone,
          inChargeTele = __inChargeTele,
          reserved = __reserved
      )
    }
    def withProviderId(__v: String): ProviderInfo = copy(providerId = __v)
    def getPlatformId: Int = platformId.getOrElse(0)
    def clearPlatformId: ProviderInfo = copy(platformId = None)
    def withPlatformId(__v: Int): ProviderInfo = copy(platformId = Some(__v))
    def getPlatformName: String = platformName.getOrElse("")
    def clearPlatformName: ProviderInfo = copy(platformName = None)
    def withPlatformName(__v: String): ProviderInfo = copy(platformName = Some(__v))
    def getProvince: String = province.getOrElse("")
    def clearProvince: ProviderInfo = copy(province = None)
    def withProvince(__v: String): ProviderInfo = copy(province = Some(__v))
    def getCity: String = city.getOrElse("")
    def clearCity: ProviderInfo = copy(city = None)
    def withCity(__v: String): ProviderInfo = copy(city = Some(__v))
    def getAddress: String = address.getOrElse("")
    def clearAddress: ProviderInfo = copy(address = None)
    def withAddress(__v: String): ProviderInfo = copy(address = Some(__v))
    def getCompany: String = company.getOrElse("")
    def clearCompany: ProviderInfo = copy(company = None)
    def withCompany(__v: String): ProviderInfo = copy(company = Some(__v))
    def getContant: String = contant.getOrElse("")
    def clearContant: ProviderInfo = copy(contant = None)
    def withContant(__v: String): ProviderInfo = copy(contant = Some(__v))
    def getContantPhone: String = contantPhone.getOrElse("")
    def clearContantPhone: ProviderInfo = copy(contantPhone = None)
    def withContantPhone(__v: String): ProviderInfo = copy(contantPhone = Some(__v))
    def getEmail: String = email.getOrElse("")
    def clearEmail: ProviderInfo = copy(email = None)
    def withEmail(__v: String): ProviderInfo = copy(email = Some(__v))
    def getZipCode: Int = zipCode.getOrElse(0)
    def clearZipCode: ProviderInfo = copy(zipCode = None)
    def withZipCode(__v: Int): ProviderInfo = copy(zipCode = Some(__v))
    def getInCharge: String = inCharge.getOrElse("")
    def clearInCharge: ProviderInfo = copy(inCharge = None)
    def withInCharge(__v: String): ProviderInfo = copy(inCharge = Some(__v))
    def getInChargePhone: String = inChargePhone.getOrElse("")
    def clearInChargePhone: ProviderInfo = copy(inChargePhone = None)
    def withInChargePhone(__v: String): ProviderInfo = copy(inChargePhone = Some(__v))
    def getInChargeTele: String = inChargeTele.getOrElse("")
    def clearInChargeTele: ProviderInfo = copy(inChargeTele = None)
    def withInChargeTele(__v: String): ProviderInfo = copy(inChargeTele = Some(__v))
    def getReserved: String = reserved.getOrElse("")
    def clearReserved: ProviderInfo = copy(reserved = None)
    def withReserved(__v: String): ProviderInfo = copy(reserved = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => providerId
        case 2 => platformId.orNull
        case 3 => platformName.orNull
        case 4 => province.orNull
        case 5 => city.orNull
        case 6 => address.orNull
        case 7 => company.orNull
        case 8 => contant.orNull
        case 9 => contantPhone.orNull
        case 10 => email.orNull
        case 11 => zipCode.orNull
        case 12 => inCharge.orNull
        case 13 => inChargePhone.orNull
        case 14 => inChargeTele.orNull
        case 15 => reserved.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(providerId)
        case 2 => platformId.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => platformName.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => province.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => city.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => address.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => company.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => contant.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => contantPhone.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => email.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => zipCode.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => inCharge.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => inChargePhone.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => inChargeTele.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => reserved.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = ctitc.seagoing.SEAGOING.ProviderInfo
}

object ProviderInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[ctitc.seagoing.SEAGOING.ProviderInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[ctitc.seagoing.SEAGOING.ProviderInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): ctitc.seagoing.SEAGOING.ProviderInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    ctitc.seagoing.SEAGOING.ProviderInfo(
      __fieldsMap(__fields.get(0)).asInstanceOf[String],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ctitc.seagoing.SEAGOING.ProviderInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      ctitc.seagoing.SEAGOING.ProviderInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SEAGOINGProto.javaDescriptor.getMessageTypes.get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SEAGOINGProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ctitc.seagoing.SEAGOING.ProviderInfo(
    providerId = ""
  )
  implicit class ProviderInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, ctitc.seagoing.SEAGOING.ProviderInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, ctitc.seagoing.SEAGOING.ProviderInfo](_l) {
    def providerId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.providerId)((c_, f_) => c_.copy(providerId = f_))
    def platformId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getPlatformId)((c_, f_) => c_.copy(platformId = Some(f_)))
    def optionalPlatformId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.platformId)((c_, f_) => c_.copy(platformId = f_))
    def platformName: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPlatformName)((c_, f_) => c_.copy(platformName = Some(f_)))
    def optionalPlatformName: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.platformName)((c_, f_) => c_.copy(platformName = f_))
    def province: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getProvince)((c_, f_) => c_.copy(province = Some(f_)))
    def optionalProvince: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.province)((c_, f_) => c_.copy(province = f_))
    def city: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getCity)((c_, f_) => c_.copy(city = Some(f_)))
    def optionalCity: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.city)((c_, f_) => c_.copy(city = f_))
    def address: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getAddress)((c_, f_) => c_.copy(address = Some(f_)))
    def optionalAddress: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.address)((c_, f_) => c_.copy(address = f_))
    def company: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getCompany)((c_, f_) => c_.copy(company = Some(f_)))
    def optionalCompany: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.company)((c_, f_) => c_.copy(company = f_))
    def contant: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getContant)((c_, f_) => c_.copy(contant = Some(f_)))
    def optionalContant: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.contant)((c_, f_) => c_.copy(contant = f_))
    def contantPhone: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getContantPhone)((c_, f_) => c_.copy(contantPhone = Some(f_)))
    def optionalContantPhone: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.contantPhone)((c_, f_) => c_.copy(contantPhone = f_))
    def email: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getEmail)((c_, f_) => c_.copy(email = Some(f_)))
    def optionalEmail: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.email)((c_, f_) => c_.copy(email = f_))
    def zipCode: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getZipCode)((c_, f_) => c_.copy(zipCode = Some(f_)))
    def optionalZipCode: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.zipCode)((c_, f_) => c_.copy(zipCode = f_))
    def inCharge: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getInCharge)((c_, f_) => c_.copy(inCharge = Some(f_)))
    def optionalInCharge: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.inCharge)((c_, f_) => c_.copy(inCharge = f_))
    def inChargePhone: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getInChargePhone)((c_, f_) => c_.copy(inChargePhone = Some(f_)))
    def optionalInChargePhone: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.inChargePhone)((c_, f_) => c_.copy(inChargePhone = f_))
    def inChargeTele: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getInChargeTele)((c_, f_) => c_.copy(inChargeTele = Some(f_)))
    def optionalInChargeTele: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.inChargeTele)((c_, f_) => c_.copy(inChargeTele = f_))
    def reserved: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getReserved)((c_, f_) => c_.copy(reserved = Some(f_)))
    def optionalReserved: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.reserved)((c_, f_) => c_.copy(reserved = f_))
  }
  final val PROVIDERID_FIELD_NUMBER = 1
  final val PLATFORMID_FIELD_NUMBER = 2
  final val PLATFORMNAME_FIELD_NUMBER = 3
  final val PROVINCE_FIELD_NUMBER = 4
  final val CITY_FIELD_NUMBER = 5
  final val ADDRESS_FIELD_NUMBER = 6
  final val COMPANY_FIELD_NUMBER = 7
  final val CONTANT_FIELD_NUMBER = 8
  final val CONTANTPHONE_FIELD_NUMBER = 9
  final val EMAIL_FIELD_NUMBER = 10
  final val ZIPCODE_FIELD_NUMBER = 11
  final val INCHARGE_FIELD_NUMBER = 12
  final val INCHARGEPHONE_FIELD_NUMBER = 13
  final val INCHARGETELE_FIELD_NUMBER = 14
  final val RESERVED_FIELD_NUMBER = 15
}
